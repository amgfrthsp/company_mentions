"""
Telegram-bot sent notifications with analyzed mentions of companies and brands.
"""

import asyncio
import datetime
import logging
import os

from decouple import config
from telegram import Update
from telegram.ext import ApplicationBuilder, CallbackContext, CommandHandler

import logic
from models import SentimentTypes

TOKEN = config('TELEGRAM_BOT_TOKEN')
MAX_NEWS_LENGTH = 2000

LOGS_PATH = config('LOGS_PATH', default=os.path.join(os.pardir, os.pardir, "logs"))
logging.basicConfig(
    filename=os.path.join(LOGS_PATH, "bot.log"),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)


async def start(update: Update, _context: CallbackContext.DEFAULT_TYPE):
    """
    Inform user about what this bot can do
    """
    message = f'''
–ü—Ä–∏–≤–µ—Ç, {update.effective_user.name} üëã
–Ø —É–≤–µ–¥–æ–º–ª—è—é –æ–± –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Ç–µ–±–µ –∫–æ–º–ø–∞–Ω–∏—è—Ö –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–æ–Ω—Ç–µ–∫—Å—Ç. 

–ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–∏ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å–æ –º–Ω–æ–π:
/subscribe _company_ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–æ –∫–æ–º–ø–∞–Ω–∏—é
/unsubscribe _company_ ‚Äî –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è
/get\_subscriptions ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫
/get\_last\_news _company_ ‚Äî –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –æ –∫–æ–º–ø–∞–Ω–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è
/help —á—Ç–æ–±—ã –µ—â–µ —Ä–∞–∑ –ø–æ–ª—É—á–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
'''
    await logic.start_bot(update.effective_chat.id)
    await update.message.reply_text(message, parse_mode="markdown")


async def subscribe(update: Update, context: CallbackContext.DEFAULT_TYPE):
    """
    Subscribe user to chosen company.
    """
    # args should contain the name of company
    if not context.args:
        await update.effective_message.reply_text(f"–ß—Ç–æ–±—ã –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è, –Ω–∞–ø–∏—à–∏ /subscribe _company_",
                                                  parse_mode="markdown")
        return

    company_name = ' '.join(context.args)

    try:
        await logic.subscribe(update.effective_chat.id, company_name)
    except Exception as e:
        logging.exception(e)
        await update.message.reply_text(f"üëÄ –£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞ #{company_name}", parse_mode="markdown")
        return

    await update.message.reply_text(f"‚úÖ –¢—ã –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ #{company_name}", parse_mode="markdown")


async def unsubscribe(update: Update, context: CallbackContext.DEFAULT_TYPE):
    """
    Unsubscribe user from chosen company.
    """
    # args should contain the name of company
    if not context.args:
        await update.effective_message.reply_text("–ß—Ç–æ–±—ã –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è, –Ω–∞–ø–∏—à–∏ /unsubscribe _company_",
                                                  parse_mode="markdown")
        return

    company_name = ' '.join(context.args)

    try:
        await logic.unsubscribe(update.effective_chat.id, company_name)
    except Exception as e:
        logging.exception(e)
        await update.message.reply_text(f"üëÄ –¢—ã –∏ —Ç–∞–∫ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ #{company_name}")
        return

    await update.message.reply_text(f"‚ùé –¢—ã –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç #{company_name}")


async def get_subscriptions(update: Update, _context: CallbackContext):
    """
    List all subscriptions of user.
    """
    subscriptions = await logic.get_subscriptions(update.effective_chat.id)
    if not subscriptions:
        await update.message.reply_text(f"‚ùï –¢—ã –Ω–∏ –Ω–∞ –∫–æ–≥–æ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω")
        return

    subscriptions_text = ''.join([f"#{subscription}\n" for subscription in subscriptions])
    await update.message.reply_text(f"‚ùï –¢—ã –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞:\n{subscriptions_text}")


async def get_sentiment_smile(sentiment: SentimentTypes) -> str:
    if sentiment == SentimentTypes.POSITIVE:
        return 'üôÇ'
    elif sentiment == SentimentTypes.NEUTRAL:
        return 'üòê'
    elif sentiment == SentimentTypes.NEGATIVE:
        return 'üôÅ'
    return 'ü§î'


async def get_news_text(news):
    max_news_length = MAX_NEWS_LENGTH // len(news)
    print(max_news_length)
    news_texts = []
    for new in news:
        title_text = f"*{new.title}*\n" if new.title else ""
        content_text = f"`{new.content[:max_news_length]}`[...]({new.url})\n" \
            if len(new.content) > max_news_length else \
            f"`{new.content}`\n[–∏—Å—Ç–æ—á–Ω–∏–∫]({new.url})\n"
        news_texts.append(f"  {await get_sentiment_smile(new.sentiment)} {title_text}{content_text}")
    return ''.join(news_texts)


async def get_posts_text(posts):
    return ''.join([
        f"  {await get_sentiment_smile(post.sentiment)} _{post.content}_ [–∏—Å—Ç–æ—á–Ω–∏–∫]({post.url})\n"
        for post in posts]
    )


async def get_mems_text(mems):
    return ''.join([
        f"  {await get_sentiment_smile(mem.sentiment)}\n{mem.content}\n[–∏—Å—Ç–æ—á–Ω–∏–∫]({mem.url})\n"
        for mem in mems]
    )


async def send_notifications(context):
    """
    Notify followers about mentions.
    """
    notifications_by_companies = await logic.get_notifications()
    for company_notification in notifications_by_companies:
        news_text = ""
        posts_text = ""
        mems_text = ""

        if company_notification.news:
            news_text = f"üì∞ –ù–æ–≤–æ—Å—Ç–∏:\n{await get_news_text(company_notification.news)}\n\n"
        if company_notification.posts:
            posts_text = f"üí¨ –ü–æ—Å—Ç—ã:\n{await get_posts_text(company_notification.posts)}\n\n"
        if company_notification.mems:
            mems_text = f"ü§£ –ú–µ–º—ã:\n{await get_mems_text(company_notification.mems)}\n\n"

        text = f'''#{company_notification.company_name}\n\n{news_text}{posts_text}{mems_text}'''

        for user_id in company_notification.user_ids:
            await context.bot.send_message(chat_id=user_id, text=text, parse_mode="markdown")


async def async_main():
    await logic.initialize_database()


def main():
    loop = asyncio.get_event_loop()
    loop.run_until_complete(async_main())

    application = ApplicationBuilder().token(token=TOKEN).build()

    application.job_queue.run_repeating(send_notifications, interval=datetime.timedelta(hours=1), first=1)

    application.add_handler(CommandHandler(["start", "help"], start))
    application.add_handler(CommandHandler("subscribe", subscribe))
    application.add_handler(CommandHandler("unsubscribe", unsubscribe))
    application.add_handler(CommandHandler("get_subscriptions", get_subscriptions))
    application.run_polling()


if __name__ == '__main__':
    main()
